
name: Wheels on Linux
on:
  workflow_dispatch:

env:
  TALIB_C_VER: 0.6.4
  TALIB_PY_VER: ${{ github.ref_name }}
  PIP_NO_VERIFY: 0
  PIP_VERBOSE: 1
  CIBW_BEFORE_BUILD: pip install -U setuptools Cython wheel meson-python ninja && pip install -U numpy
  CIBW_TEST_REQUIRES: pytest pandas maturin polars
  CIBW_SKIP: "pp*"

jobs:
  build_manylinux_x86_64:
    name: Build ManyLinux x86_64 wheels
    strategy:
      matrix:
        os: ["ubuntu-22.04"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_BUILD_ALL: |
              bash ./tools/build_talib_linux.sh
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_SKIP: "pp* cp*-musllinux*"
          CIBW_TEST_COMMAND: >
            cd .. &&
            pytest -k "not RSI and not threading" {project}/tests
          CIBW_ARCHS_LINUX: x86_64
          CIBW_BUILD_FRONTEND: build
          CIBW_ENVIRONMENT_LINUX : >
            TA_LIBRARY_PATH="ta-lib-install/lib"
            TA_INCLUDE_PATH="ta-lib-install/include"
            PIP_NO_BUILD_ISOLATION=false
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            export LD_LIBRARY_PATH="/project/ta-lib-install/lib:$LD_LIBRARY_PATH"
            auditwheel repair -w {dest_dir} {wheel}
      - name: Set wheel name
        run: |
          echo "WHEEL_NAME=ta_lib-${{env.TALIB_PY_VER}}-manylinux_x86_64" >> $GITHUB_ENV
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: ${{ env.WHEEL_NAME }}

